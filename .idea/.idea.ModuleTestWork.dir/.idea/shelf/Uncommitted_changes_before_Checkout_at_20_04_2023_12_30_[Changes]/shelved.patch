Index: Validation.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Globalization;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace ModuleTestWork\r\n{\r\n    public static class Validation\r\n    {\r\n        public static int ValidPositiveInt(string amount)\r\n        {\r\n            if (int.TryParse(amount,out int result))\r\n            {\r\n                if (result >= 0)\r\n                {\r\n                    return result;\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception($\"{result} have to be positive!\");\r\n                }\r\n            }\r\n            else\r\n            {\r\n                throw new Exception($\"{result} have to be integer\");\r\n            }\r\n        }\r\n        \r\n        public static string ValidString(string text)\r\n        {\r\n            string regex = @\"^[A-Za-z ]+$\";\r\n            if (Regex.IsMatch(text, regex))\r\n            {\r\n                return text;\r\n            }\r\n            else\r\n            {\r\n                throw new Exception(\"Name is not valid!\");\r\n            }\r\n        }\r\n\r\n        public static int ValidNoOfPeople(string amount)\r\n        {\r\n            if (int.TryParse(amount, out int result))\r\n            {\r\n                if (result < 1 || result > 10)\r\n                {\r\n                    throw new Exception($\"NoOfPeople have to be equal to 1-10\");\r\n                }\r\n                else\r\n                {\r\n                    return result;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                throw new Exception($\"{result} have to be integer\");\r\n            }\r\n        }\r\n        public static Booking.Time ValidTime(string time)\r\n        {\r\n            string pattern = @\"^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";\r\n            if (Regex.IsMatch(time, pattern))\r\n            {\r\n                string[] timeParts = time.Split(':');\r\n                int hour = int.Parse(timeParts[0]);\r\n                int minute = int.Parse(timeParts[1]);\r\n                return new Booking.Time(hour, minute);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception(\"Time format is not valid! Use HH:mm format.\");\r\n            }\r\n        }\r\n        public static Booking.Time ValidBothDate(string endtime,string starttime)\r\n        {\r\n            try\r\n            {\r\n                Booking.Time time1 = ValidTime(starttime);\r\n                Booking.Time time2 = ValidTime(endtime);\r\n                if (time1.Hour > time2.Hour || (time1.Hour == time2.Hour && time1.Minute >= time2.Minute))\r\n                {\r\n                    throw new Exception(\"EndTime must be greater than StartTime.\");\r\n                }\r\n                TimeSpan duration = new TimeSpan(time2.Hour - time1.Hour, time2.Minute - time1.Minute, 0);\r\n\r\n                if (duration.TotalMinutes < 30 || duration.TotalMinutes > 90)\r\n                {\r\n                    throw new Exception(\"Booking duration must be between 30 minutes and 1 hour 30 minutes.\");\r\n                }\r\n\r\n                return time1;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                throw new Exception(e.InnerException?.Message);\r\n            }\r\n        }\r\n        public static double ValidPrice(string price)\r\n        {\r\n            CultureInfo culture = CultureInfo.InvariantCulture;\r\n            bool isNumeric = double.TryParse(price, NumberStyles.Any, culture, out double parsedPrice);\r\n            if (isNumeric)\r\n            {\r\n                string decimalSeparator = culture.NumberFormat.NumberDecimalSeparator;\r\n                string[] splitPrice = price.Split(decimalSeparator);\r\n                if (splitPrice.Length == 1 || (splitPrice.Length == 2 && splitPrice[1].Length == 2))\r\n                {\r\n                    return parsedPrice;\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Price must have exactly 2 decimal places or be a whole number!\");\r\n                }\r\n            }\r\n            else\r\n            {\r\n                throw new Exception(\"Price is not valid!\");\r\n            }\r\n        }\r\n        \r\n    }\r\n}
===================================================================
diff --git a/Validation.cs b/Validation.cs
--- a/Validation.cs	
+++ b/Validation.cs	
@@ -87,7 +87,7 @@
                     throw new Exception("Booking duration must be between 30 minutes and 1 hour 30 minutes.");
                 }
 
-                return time1;
+                return time2;
             }
             catch (Exception e)
             {
Index: Collection.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text.Json;\r\n\r\nnamespace ModuleTestWork\r\n{\r\n    public class CollectionBooking\r\n    {\r\n        public string? SomeFile { get; set; }\r\n        public List<Booking> Collection;\r\n        public CollectionBooking()\r\n        {\r\n            Collection = new List<Booking>();\r\n        }\r\n        public void Append(Booking element)\r\n        {\r\n            Collection.Add(element!);\r\n        }\r\n        public Dictionary<string, Delegate> GetValidFields()\r\n        {\r\n            Booking item = new Booking();\r\n            Dictionary<string, Delegate> fieldValid = item.ToValidFields();\r\n            return fieldValid;\r\n        }\r\n        public override string ToString()\r\n        {\r\n            string toPrint = \"\";\r\n            foreach (var order in Collection)\r\n            {\r\n                toPrint += order + \"\\n\";\r\n            }\r\n            return toPrint;\r\n        }\r\n        public void ReadFromFile(string fileName)\r\n        {\r\n            string jsonString = File.ReadAllText(fileName);\r\n            List<JsonElement>? data = JsonSerializer.Deserialize<List<JsonElement>>(jsonString);\r\n            Dictionary<string, Delegate> fieldValid = GetValidFields();\r\n            foreach (JsonElement element in data!)\r\n            {\r\n                bool passed = true;\r\n                \r\n                for (int i = 0; i < fieldValid.Count; i++)\r\n                {   \r\n                    \r\n                    try\r\n                    {\r\n                        string tempKey = fieldValid.Keys.ElementAt(i); // string?\r\n                        \r\n                        if (tempKey == \"EndTime\")\r\n                        {\r\n                            fieldValid[tempKey].DynamicInvoke(element.GetProperty(tempKey).ToString(),\r\n                                element.GetProperty(\"StartTime\").ToString() );\r\n                        }\r\n                        else\r\n                        {\r\n                            fieldValid[tempKey].DynamicInvoke(element.GetProperty(tempKey).ToString()); //\r\n                        }\r\n                        \r\n                    }\r\n                    catch(Exception e)\r\n                    {\r\n                        Console.WriteLine(e.InnerException?.Message);\r\n                        passed = false;\r\n                    }\r\n                }\r\n\r\n                \r\n                \r\n                if (passed)\r\n                {\r\n                    Booking tempOrder = JsonSerializer.Deserialize<Booking>(element)!;\r\n                    Collection.Add(tempOrder);\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine(\"Previous Booking had problems during validation.\");\r\n                }\r\n            }\r\n            \r\n        }\r\n        public static List<int> FindMostBookedHours(CollectionBooking bookings)\r\n        {\r\n            Dictionary<int, int> hourCounts = new Dictionary<int, int>();\r\n\r\n            foreach (var booking in bookings.Collection)\r\n            {\r\n                int startHour = booking.StartTime.Hour;\r\n                int endHour = booking.EndTime.Hour;\r\n\r\n                for (int hour = startHour; hour < endHour; hour++)\r\n                {\r\n                    if (hourCounts.ContainsKey(hour))\r\n                    {\r\n                        hourCounts[hour]++;\r\n                    }\r\n                    else\r\n                    {\r\n                        hourCounts.Add(hour, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            int maxBookings = hourCounts.Values.Max();\r\n\r\n            List<int> mostBookedHours = hourCounts\r\n                .Where(pair => pair.Value == maxBookings)\r\n                .Select(pair => pair.Key)\r\n                .ToList();\r\n\r\n            return mostBookedHours;\r\n        }\r\n        public static bool CanAddBooking(List<Booking> bookings, Booking newBooking)\r\n        {\r\n            int maxSeats = 15;\r\n            int minDuration = 30;\r\n            int maxDuration = 90;\r\n            \r\n            /*TimeSpan duration = newBooking.EndTime - newBooking.StartTime;*/\r\n            int durationhour = newBooking.EndTime.Hour - newBooking.StartTime.Hour;\r\n            int durationminutes =newBooking.EndTime.Minute - newBooking.StartTime.Minute;\r\n            int duration = durationminutes + (durationhour * 60);\r\n            if (duration < minDuration || duration > maxDuration)\r\n            {\r\n                return false;\r\n            }\r\n            \r\n            foreach (var booking in bookings)\r\n            {\r\n                if (newBooking.StartTime.Hour < booking.EndTime.Hour && newBooking.EndTime.Hour > booking.StartTime.Hour && newBooking.StartTime.Minute < booking.EndTime.Minute && newBooking.EndTime.Minute > booking.StartTime.Minute)\r\n                {\r\n                    int totalSeats = newBooking.NoOfPeople + booking.NoOfPeople;\r\n                    if (totalSeats > maxSeats)\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n        \r\n    }    \r\n}\r\n
===================================================================
diff --git a/Collection.cs b/Collection.cs
--- a/Collection.cs	
+++ b/Collection.cs	
@@ -120,6 +120,8 @@
             int duration = durationminutes + (durationhour * 60);
             if (duration < minDuration || duration > maxDuration)
             {
+                
+                Console.WriteLine("Duration isnt correct");
                 return false;
             }
             
@@ -130,6 +132,7 @@
                     int totalSeats = newBooking.NoOfPeople + booking.NoOfPeople;
                     if (totalSeats > maxSeats)
                     {
+                        Console.WriteLine("Too much people");
                         return false;
                     }
                 }
